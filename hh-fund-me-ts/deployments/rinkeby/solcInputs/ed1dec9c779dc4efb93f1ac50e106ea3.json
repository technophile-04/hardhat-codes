{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    // Immutables and constant are not stored insied a storage slot instead they are stored in bytecode itself\n    uint256 public constant MIN_USD = 50 * 1e18;\n    address public immutable i_owner;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address _priceFeed) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(_priceFeed);\n    }\n\n    function fund() public payable {\n        // msg.value.getConversionRate(); msg.value becomes first parameter of the function\n        require(\n            msg.value.getConversionRate(priceFeed) >= MIN_USD,\n            \"Price is lower, send more\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        /* Reset mapping */\n        for (uint256 i = 0; i < funders.length; i++) {\n            address currAddress = funders[i];\n            addressToAmountFunded[currAddress] = 0;\n        }\n\n        /* Reseting the array to point to new location and intial element 0 */\n        funders = new address[](0);\n\n        // msg.sender = address\n        // paybale(msg.sender) = paybale address;\n\n        (bool callSuccess, ) = payable(address(this)).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call falied \");\n    }\n\n    modifier onlyOwner() {\n        // The string is stored in string array\n        // require(msg.sender == i_owner, \"Not owner of the contract\");\n\n        // Hence we dont store array of string\n        if (msg.sender == i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    /* \n        A contract receiving Ether must have at least one of the functions below\n        receive() external payable\n        fallback() external payable\n        receive() is called if msg.data is empty, otherwise fallback() is called.\n    */\n\n    /*                \n            send Ether\n               |\n         msg.data is empty?\n              / \\\n            yes  no\n            /     \\\nreceive() exists?  fallback()\n         /   \\\n        yes   no\n        /      \\\n    receive()   fallback() \n    */\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // They can't have state variables and also all func will be internal\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (\n            ,\n            /*uint80 roundID*/\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/\n            ,\n            ,\n\n        ) = /*uint80 answeredInRound*/\n            priceFeed.latestRoundData();\n        //because returned value has 8 decimal place and our msg.value is of 18\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 _ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 currEthPrice = getPrice(priceFeed);\n        uint256 ethAmountToUSD = (currEthPrice * _ethAmount) / 1e18;\n        return ethAmountToUSD;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}